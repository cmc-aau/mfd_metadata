"\n",
paste("Dear", paste0(receivers, collapse=" and "), sep=" "),
"\n",
paste("I am writing you about the", project_name, "data collaboration.",
"we were reviewing the data in order to proceed with the analysis and we relised that some entries are missing (namely in variables called:",
(requested_indices %>% cat(sep=", ")),
").", sep=" "), sep="\n"))
sink(file=NULL)
}
print_email(receiver=c("Name1", "Name2"), requested_indices=c("pH", "temp"), fname=paste0(wd, "/test.txt"))
print_email(receiver=c("Name1", "Name2"), requested_indices=c("pH", "temp"), fname=paste0(wd, "/test.txt"))
print_email(receiver=c("Name1", "Name2"), requested_indices=c("pH", "temp"), fname=paste0(wd, "/test.txt"))
c("pH", "temp") %>% cat(sep=", ")
c("pH", "temp") %>% cat(sep=", ") %>% print()
print(c("pH", "temp") %>% cat(sep=", "))
print_email <- function(project_name = NA, receivers = c(), requested_indices = c(), fname = NA){
sink(file=fname)
cat(paste(paste("To:", receivers, sep=" "),
paste("Object:", project_name, "data collab", sep=" "),
"\n",
"\n",
paste("Dear", paste0(receivers, collapse=" and "), sep=" "),
"\n",
paste("I am writing you about the", project_name, "data collaboration.",
"we were reviewing the data in order to proceed with the analysis and we relised that some entries are missing (namely in variables called:",
(print(requested_indices %>% cat(sep=", "))),
").", sep=" "), sep="\n"))
sink(file=NULL)
}
print_email(receiver=c("Name1", "Name2"), requested_indices=c("pH", "temp"), fname=paste0(wd, "/test.txt"))
print_email <- function(project_name = NA, receivers = c(), requested_indices = c(), fname = NA){
sink(file=fname)
cat(paste(paste("To:", receivers, sep=" "),
paste("Object:", project_name, "data collab", sep=" "),
"\n",
"\n",
paste("Dear", paste0(receivers, collapse=" and "), sep=" "),
"\n",
paste("I am writing you about the", project_name, "data collaboration.",
"we were reviewing the data in order to proceed with the analysis and we relised that some entries are missing (namely in variables called:",
(requested_indices %>% cat(sep=", ")),
").", sep=" "), sep="\n"))
sink(file=NULL)
}
print_email(receiver=c("Name1", "Name2"), requested_indices=c("pH", "temp"), fname=paste0(wd, "/test.txt"))
print_email <- function(project_name = NA, receivers = c(), requested_indices = c(), fname = NA){
sink(file=fname)
cat(paste(paste("To:", receivers, sep=" "),
paste("Object:", project_name, "data collab", sep=" "),
"\n",
"\n",
paste("Dear", paste0(receivers, collapse=" and "), sep=" "),
"\n",
paste("I am writing you about the", project_name, "data collaboration.",
"we were reviewing the data in order to proceed with the analysis and we relised that some entries are missing (namely in variables called:",
(requested_indices %>% cat(sep=", ")),
").", sep=" "), sep="\n"))
sink(file=NULL)
}
print_email(receiver=c("Name1", "Name2"), requested_indices=c("pH", "temp"), fname=paste0(wd, "/test.txt"))
print_email <- function(project_name = NA, receivers = c(), requested_indices = c(), fname = NA){
sink(file=fname)
cat(paste(paste("To:", receivers, sep=" "),
paste("Object:", project_name, "data collab", sep=" "),
"\n",
"\n",
paste("Dear", paste0(receivers, collapse=" and "), sep=" "),
"\n",
paste("I am writing you about the", project_name, "data collaboration.",
"we were reviewing the data in order to proceed with the analysis and we relised that some entries are missing (namely in variables called:",
requested_indices,
").", sep=" "), sep="\n"))
sink(file=NULL)
}
print_email(receiver=c("Name1", "Name2"), requested_indices=c("pH", "temp"), fname=paste0(wd, "/test.txt"))
paste("here", c("a", "b"), "there" sep=" ")
paste("here", c("a", "b"), "there", sep=" ")
paste("here", c("a", "b"), "there", sep=" ")
paste("here" "there", sep=" ")
paste("here", "there", sep=" ")
paste("here", "there")
paste0("here", "there", sep=" ")
4+2
sink(file=NULL)
ds
4+3
sink(file=NULL)
4+3
knitr::asis_output("## Load libraries")
library(tidyverse)
library(knitr)
library(ghql)
library(jsonlite)
library(lubridate)
library(mapDK)
library(rgdal)
library(sp)
options(width = 500)
asis_output("## Set the environment")
options(stringsAsFactors = F, gsubfn.engine = "R")
Sys.setenv("LANGUAGE"="En")
wd <- getwd()
data.path <- "/../../data"
mails_01.path <- paste0(wd, '/../../analysis/mails_01')
minimal_indices <- NA # It is interpreted as all
eval_debug <- params$debug
eval_debug2 <- params$debug2
eval_internal <- params$internal
data.frame(param=c("debug", "debug2", "internal"), value=c(eval_debug, eval_debug2, eval_internal)) %>%
kable()
asis_output("## Custom functions")
asis_output("### Load functions")
source(paste0(wd, "/mfd_report_test_routine.R"))
asis_output("### Print functions")
methods(pstats)
asis_output("## Load data")
asis_output("### Download metadata from online Microflora Danica database
This is the database that is linked to initial data-entry via the Microflora Danica App.")
token <- Sys.getenv("GITHUB_GRAPHQL_TOKEN")
con <- GraphqlClient$new(url = "https://mfd.programming.cool/graphql/",
headers = list(Authorization = paste0("Bearer ", token)))
qry <- Query$new()
qry$query('fieldSamplesquery',
'{fieldsamples {
barcode
type
gpslocation
habitattype
habitattypenumber
sitename
received
samplingcomment
project {id}}}')
executedQuery <- con$exec(qry$queries$fieldSamplesquery)
mfd_db0 <- executedQuery %>%
fromJSON(simplifyVector = TRUE, flatten = TRUE) %>%
as.data.frame()
colnames(mfd_db0) <- c("fieldsample_barcode", "sample_type", "gps_location", "habitat_type",
"habitat_typenumber", "sitename", "received",
"sampling_comment", "project_id")
rm(con, qry, executedQuery, token)
asis_output("### Clean up general problems in the database metadata")
mfd_db <- mfd_db0 %>%
mutate(received = dmy_hms(received, truncated = 3) %>% format("%Y-%m-%d")) %>%        # format dates
filter(str_detect(fieldsample_barcode, "^MFD")) %>%                                   # filter strange barcodes
filter(!str_detect(sampling_comment, "extraction neg") | is.na(sampling_comment)) %>% # remove ext negative
mutate(across(!c(fieldsample_barcode, project_id), ~tolower(as.character(.)))) %>%    # make all lowercase
mutate(across(habitat_typenumber, ~ toupper(.))) %>%                                  # format habitat number
mutate(across(habitat_typenumber, ~ str_replace_all(., "X", "0"))) %>%
mutate(across(habitat_typenumber, ~replace_na(., "0000"))) %>%
mutate(across(habitat_typenumber, ~ tolower(.))) %>%
separate(gps_location, into = c("latitude", "longitude"), sep = ",") %>%              # split gps
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) %>%
mutate(mfd_sampletype = NA,                                                           # Add classifications
mfd_areatype   = NA,
mfd_hab1       = NA,
mfd_hab2       = NA,
mfd_hab3       = NA,
sampling_date  = NA)
rm(mfd_db0)
asis_output("### Format mfd dataframe")
mfd_projects <- tibble(project_id = unique(mfd_db$project_id) %>% sort(),
description = NA,
extended_metadata = NA,
people = NA,
responsible = NA,
comment = NA)
asis_output("### Load the map of Denmark")
if(!file.exists(paste0(wd, data.path ,"/downloads/DK_regions.geojson"))){
url = "https://api.dataforsyningen.dk/landsdele?format=geojson"
geofile = tempfile()
download.file(url, geofile)
regions <- rgdal::readOGR(geofile)
rgdal::writeOGR(regions, paste0(wd, data.path, "/downloads/DK_regions.geojson"), layer="file76fc3f3c3b00", driver="GeoJSON")
} else {
regions <- rgdal::readOGR(paste0(wd, data.path, "/downloads/DK_regions.geojson"))
}
pid <- "P01_1"
des <- "Biowide (Biodiversity in Width and Depth). In light of the biodiversity crisis and our limited ability to explain variation in biodiversity, tools to quantify spatial and temporal variation in biodiversity and its underlying drivers are critically needed. Inspired by the recently published ecospace framework, we developed and tested a sampling design for environmental and biotic mapping. We selected 130 study sites (40×40 m) across Denmark using stratified random sampling along the major environmental gradients underlying biotic variation. Using standardized methods, we collected site species data on vascular plants, bryophytes, macrofungi, lichens, gastropods and arthropods. To evaluate sampling efficiency, we calculated regional coverage (relative to the known species number per taxonomic group), and site scale coverage (i.e., sample completeness per taxonomic group at each site). To extend taxonomic coverage to organisms that are difficult to sample by classical inventories (e.g., nematodes and non-fruiting fungi), we collected soil for metabarcoding. Finally, to assess site conditions, we mapped abiotic conditions, biotic resources and habitat continuity. The main paper is described here: https://bmcecol.biomedcentral.com/articles/10.1186/s12898-019-0260-x. See a list of related publications here: https://ecos.au.dk/forskningraadgivning/temasider/publikationer."
ext <- "Environmental parameters; alternative habitat classifications; plant counts; animal counts; fungal counts; ITS2 amplicons; trnL amplicons."
peo <- "Tobias Guldberg Frøslev <tobiasgf@sund.ku.dk>; Rasmus Ejrnæs <rasmus@bios.au.dk>"
res <- "Thomas Bygh Nymann Jensen <tbnj@bio.aau.dk>"
com <- ""
mfd_projects[mfd_projects$project_id == pid,] <- list(pid, des, ext, peo, res, com)
mfd_db <- mfd_db %>%
mutate(mfd_areatype       = ifelse(project_id == pid & habitat_type == "natural_soil", "Natural", mfd_areatype),
mfd_areatype       = ifelse(project_id == pid & habitat_type == "agriculture", "Agriculture", mfd_areatype),
mfd_sampletype     = ifelse(project_id == pid, "Soil", mfd_sampletype),
habitat_typenumber = ifelse(project_id == pid & habitat_type == "agriculture", "6000", habitat_typenumber),
sampling_date      = ifelse(project_id == pid, NA, sampling_date),
sampling_comment   = ifelse(project_id == pid & sampling_comment == "", NA, sampling_comment)) %>%
add_ontology(ontology_path=paste0(wd, data.path, "/ontology/2022-11-28_mfd-habitat-ontology.xlsx"))
mfd_db_subproject <- mfd_subset(project = pid, data_table = mfd_db)
N <- nrow(mfd_db_subproject)
missing_info(project = pid)
summarise_metadata(data_table = mfd_db_subproject) %>%
kable(align="r", digits=2)
ooe_text(data_table = mfd_db_subproject)
missing_meta <- missing_metadata(data_table = mfd_db_subproject, indices = minimal_indices)
out_coords_text(data_table = mfd_db_subproject, regions = regions, missing_meta = missing_meta)
samples_missing_coords <- missing_coords(mfd_db_subproject)
if(length(samples_missing_coords)<N){
samples_on_map(data_table = mfd_db_subproject, samples_out = coords_out(regions_map = regions, data_table = mfd_db_subproject))
}
dir.create(file.path(paste0(wd, data.path, "/"), pid), showWarnings = FALSE)
print_incomplete_entries(data_table = missing_meta, fname = paste0(wd, data.path, "/", pid, "/table_to_fill.csv"))
4+3
install.packages("stringr")
knit_with_parameters("~/mfd_metadata/scripts/R_scripts/mfd_report_try.Rmd")
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt")
counts
?separate
library(tidyverse)
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("to_split", "barcode", "reads")) %>%
separate(to_split, into=c("plate", "pool"), sep="_")
counts
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("to_split", "Barcode", "Reads")) %>%
separate(to_split, into=c("Plate", "Pool"), sep="_")
counts %>%
ggplot(aes(x=Barcode, fill=Reads)) +
geom_tile() +
facet_wrap(Plate~Pool, nrow = 1)
counts %>%
ggplot(aes(x=Barcode, y=fill, fill=Reads)) +
geom_tile() +
facet_wrap(Plate~Pool, nrow = 1)
counts %>%
ggplot(aes(x=Barcode, y=Reads, fill=Reads)) +
geom_tile() +
facet_wrap(Plate~Pool, nrow = 1)
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) #%>%
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
facet_wrap(Plate~Pool, nrow = 1)
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
facet_wrap(Plate~Pool, nrow = 1)
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) #%>%
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
facet_wrap(Plate~Pool, nrow = 1)
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile()
counts %>%
ggplot(aes(y=Barcode, x=Plate_Pool, fill=Reads)) +
geom_tile()
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode))
counts
library(tidyverse)
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode))
counts %>%
ggplot(aes(y=Barcode, x=Plate_Pool, fill=Reads)) +
geom_tile() +
facet_wrap(Plate~Pool, nrow = 1)
library(tidyverse)
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode))
counts %>%
ggplot(aes(y=Barcode, x=Plate_Pool, fill=Reads)) +
geom_tile()
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode),
Barcode=factor(Barcode, levels = rev(Barcode)))
counts %>%
ggplot(aes(y=Barcode, x=Plate_Pool, fill=Reads)) +
geom_tile()
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode),
Barcode=factor(Barcode, levels = (Barcode)))
counts %>%
ggplot(aes(y=Barcode, x=Plate_Pool, fill=Reads)) +
geom_tile()
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode),
Barcode=factor(Barcode, levels = rev(sort(unique(Barcode)))))
counts %>%
ggplot(aes(y=Barcode, x=Plate_Pool, fill=Reads)) +
geom_tile()
counts %>%
ggplot(aes(y=Barcode, x=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic()
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode),
Barcode=factor(Barcode, levels = (sort(unique(Barcode)))))
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode),
Barcode=factor(Barcode, levels=sort(unique(Barcode))),
Plate_Pool=factor(Plate_Pool, levels=sort(union(Plate_Pool), decreasing=T)))
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode),
Barcode=factor(Barcode, levels=sort(unique(Barcode))),
Plate_Pool=factor(Plate_Pool, levels=sort(union(Plate_Pool), decreasing=T)))
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode),
Barcode=factor(Barcode, levels=sort(unique(Barcode))),
Plate_Pool=factor(Plate_Pool, levels=sort(union(Plate_Pool), decreasing=T)))
counts <- read.table("/home/fdelogu/coronavar/data/general_stats/project_counts.txt") %>%
`colnames<-`(c("Plate_Pool", "Barcode", "Reads")) %>%
mutate(Barcode=gsub("barcode", "NB", Barcode),
Barcode=factor(Barcode, levels=sort(unique(Barcode))),
Plate_Pool=factor(Plate_Pool, levels=sort(unique(Plate_Pool), decreasing=T)))
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
counts %>%
group_by(Plate_Pool) %>%
mutate(s=sum(Reads)) %>%
ungroup() %>%
mutate(Reads=Reads/s) %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
demu.plot <- counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggsave(demu.plot, "/home/fdelogu/coronavar/results/figures/demu_stats.png")
demu.plot <- counts %>%
ggplot(aes(x=Barcode, y=Plate_Pool, fill=Reads)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen") +
coord_fixed() +
theme_classic() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggsave(demu.plot, "/home/fdelogu/coronavar/results/figures/demu_stats.png")
ggsave(demu.plot, "/home/fdelogu/coronavar/results/figures/demu_stats.png")
ggsave(demu.plot, "/home/fdelogu/coronavar/results/figures/demu_stats.png")
?ggsave
ggsave(demu.plot, filname="/home/fdelogu/coronavar/results/figures/demu_stats.png")
wd
wd()
getwd()
ggsave(demu.plot, filname="/home/fdelogu/coronavar/results/figures/demu_stats.png")
ggsave(demu.plot, filname="/home/fdelogu/coronavar/results/figures/demu_stats.png")
ggsave(plot=demu.plot, filname="/home/fdelogu/coronavar/results/figures/demu_stats.png")
ggsave("/home/fdelogu/coronavar/results/figures/demu_stats.png", demu.plot)
ggsave("/home/fdelogu/coronavar/results/figures/demu_stats.png", demu.plot, width=10, height=5)
ggsave("/home/fdelogu/coronavar/results/figures/demu_stats.png", demu.plot, width=15, height=7)
sapply(ls(e1), function(x) get(x, envir = e1))
Sys.getenv()
ls
ls()
library(tidyverse)
library(knitr)
library(ghql)
library(jsonlite)
library(lubridate)
library(mapDK)
library(rgdal)
library(sp)
options(width = 500)
options(stringsAsFactors = F, gsubfn.engine = "R")
Sys.setenv("LANGUAGE"="En")
wd <- getwd()
ontology.path <- paste0(wd, '/../../data/ontology/2022-11-28_mfd-habitat-ontology.xlsx')
downloads.path <- paste0(wd, '/../../data/downloads')
metadata.path <- paste0(wd, '/../../data/metadata')
mfd_projects.path <- paste0(wd, '/../../data/results/mfd_projects.xlsx')
minimal_indices_explanation <- paste0(metadata.path, '/general/minimal_metadata_descriptors.xlsx')
reformat.metadata.path <- paste0(wd, '/../../analysis/metadata')
mails_01.path <- paste0(wd, '/../../analysis/mails_01')
minimal_indices <- c("fieldsample_barcode", "sample_type", "sampling_date",
"latitude", "longitude",  "habitat_type", "habitat_typenumber", "sitename",
"mfd_sampletype", "mfd_areatype", "mfd_hab1", "mfd_hab2", "mfd_hab3") # NA # It is interpreted as all
eval_debug <- params$debug
eval_debug2 <- params$debug2
eval_internal <- params$internal
data.frame(param=c("debug", "debug2", "internal"), value=c(eval_debug, eval_debug2, eval_internal)) %>%
kable()
source(paste0(wd, "/mfd_report_test_routine.R"))
methods(pstats)
#mfd_projects <- readxl::read_excel(mfd_projects.path)
#mfd_project.name_conversion <- c("pid", "pnm", "des", "ext", "peo", "res", "com", "metadata_map_location")
#names(mfd_project.name_conversion) <- c("project_id",	"project_name",	"project_description",	"extended_description",	"people",	"responsible",	"comment",	"metadata_map_location")
token <- Sys.getenv("GITHUB_GRAPHQL_TOKEN")
con <- GraphqlClient$new(url = "https://mfd.programming.cool/graphql/",
headers = list(Authorization = paste0("Bearer ", token)))
qry <- Query$new()
qry$query('fieldSamplesquery',
'{fieldsamples {
barcode
type
gpslocation
habitattype
habitattypenumber
sitename
received
samplingcomment
project {id}}}')
executedQuery <- con$exec(qry$queries$fieldSamplesquery)
mfd_db0 <- executedQuery %>%
fromJSON(simplifyVector = TRUE, flatten = TRUE) %>%
as.data.frame()
colnames(mfd_db0) <- c("fieldsample_barcode", "sample_type", "gps_location", "habitat_type",
"habitat_typenumber", "sitename", "received",
"sampling_comment", "project_id")
rm(con, qry, executedQuery, token)
mfd_db <- mfd_db0 %>%
mutate(received = dmy_hms(received, truncated = 3) %>% format("%Y-%m-%d")) %>%        # format dates
filter(str_detect(fieldsample_barcode, "^MFD")) %>%                                   # filter strange barcodes
filter(!str_detect(sampling_comment, "extraction neg") | is.na(sampling_comment)) %>% # remove ext negative
mutate(across(!c(fieldsample_barcode, project_id), ~tolower(as.character(.)))) %>%    # make all lowercase
mutate(across(habitat_typenumber, ~ toupper(.))) %>%                                  # format habitat number
mutate(across(habitat_typenumber, ~ str_replace_all(., "X", "0"))) %>%
#mutate(across(habitat_typenumber, ~replace_na(., "0000"))) %>%
#mutate(across(habitat_typenumber, ~ tolower(.))) %>%
separate(gps_location, into = c("latitude", "longitude"), sep = ",") %>%              # split gps
mutate(latitude = as.numeric(latitude),
longitude = as.numeric(longitude)) %>%
mutate(mfd_sampletype = NA,                                                           # Add classifications
mfd_areatype   = NA,
mfd_hab1       = NA,
mfd_hab2       = NA,
mfd_hab3       = NA,
sampling_date  = NA)
rm(mfd_db0)
mfd_projects <- tibble(project_id = unique(mfd_db$project_id) %>% sort(),
project_name = NA,
description = NA,
extended_metadata = NA,
people = NA,
responsible = NA,
comment = NA,
metadata_map = NA)
#if(!file.exists(paste0(downloads.path,"/DK_regions.geojson"))){
#  url = "https://api.dataforsyningen.dk/landsdele?format=geojson"
#  geofile = tempfile()
#  download.file(url, geofile)
#  regions <- rgdal::readOGR(geofile)
#  rgdal::writeOGR(regions, paste0(downloads.pathh, "/DK_regions.geojson"), layer="file76fc3f3c3b00", driver="GeoJSON")
#} else {
#  regions <- rgdal::readOGR(paste0(downloads.path, "/DK_regions.geojson"))
#}
43000+4673
(43000+4673)
(43000+4673)*0.66
